"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77320],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),p=o,y=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),o=t(34334),r="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return p}});var a=t(83117),o=t(67294),r=t(34334),i=t(72389),c=t(67392),l=t(7094),s=t(12466),u="tabList__CuJ",m="tabItem_LNqP";function d(e){var n,t,i=e.lazy,d=e.block,p=e.defaultValue,y=e.values,f=e.groupId,b=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=y?y:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,c.l)(k,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(n=null!=p?p:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:g[0].props.value;if(null!==h&&!k.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,l.U)(),E=v.tabGroupChoices,N=v.setTabGroupChoices,w=(0,o.useState)(h),R=w[0],T=w[1],I=[],C=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var D=E[f];null!=D&&D!==R&&k.some((function(e){return e.value===D}))&&T(D)}var O=function(e){var n=e.currentTarget,t=I.indexOf(n),a=k[t].value;a!==R&&(C(n),T(a),null!=f&&N(f,String(a)))},x=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,o=I.indexOf(e.currentTarget)+1;t=null!=(a=I[o])?a:I[0];break;case"ArrowLeft":var r,i=I.indexOf(e.currentTarget)-1;t=null!=(r=I[i])?r:I[I.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},b)},k.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:R===n?0:-1,"aria-selected":R===n,key:n,ref:function(e){return I.push(e)},onKeyDown:x,onFocus:O,onClick:O},i,{className:(0,r.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":R===n})}),null!=t?t:n)}))),i?(0,o.cloneElement)(g.filter((function(e){return e.props.value===R}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==R})}))))}function p(e){var n=(0,i.Z)();return o.createElement(d,(0,a.Z)({key:String(n)},e))}},63827:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var a=t(83117),o=t(80102),r=(t(67294),t(3905)),i=t(65488),c=t(85162),l=["components"],s={sidebar_position:3,title:"Bulk Update with RestQL"},u=void 0,m={unversionedId:"collections/documents/tutorials/bulk-update-restql",id:"collections/documents/tutorials/bulk-update-restql",title:"Bulk Update with RestQL",description:"This tutorial is about using RestQL to bulk update document Collection data.",source:"@site/docs/collections/documents/tutorials/bulk-update-restql.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/bulk-update-restql",permalink:"/docs/collections/documents/tutorials/bulk-update-restql",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/tutorials/bulk-update-restql.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Bulk Update with RestQL"},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/docs/collections/documents/tutorials/working-with-documents"},next:{title:"Realtime Updates",permalink:"/docs/collections/documents/tutorials/using-realtime-updates"}},d={},p=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],y={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This tutorial is about using RestQL to bulk update ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," Collection data. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are new to Macrometa GDN, we strongly recommend reading ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/what-is-macrometa"},"What is Macrometa"))," of Macrometa GDN.")),(0,r.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,r.kt)("p",null,"Let's assume your"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tenant name is ",(0,r.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,r.kt)("li",{parentName:"ul"},"User password is ",(0,r.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,r.kt)("h2",{id:"sdk-download"},"SDK download"),(0,r.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\nTo install pyC8, simply run\n\n    $ pip3 install pyC8\n\nor, if you prefer to use conda:\n\n    conda install -c conda-forge pyC8\n\nor pipenv:\n\n    pipenv install --pre pyC8\n\nOnce the installation process is finished, you can begin developing applications in Python.\n"))),(0,r.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\n    yarn add jsc8\n    (or)\n    npm install jsc8\n\nIf you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n    npm install --global jsc8\n\nFrom source,\n\n    git clone https://github.com/macrometacorp/jsc8.git\n    cd jsC8\n    npm install\n    npm run dist\n")))),(0,r.kt)("h2",{id:"code-sample"},"Code Sample"),(0,r.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n    _headers = {\n        Accept: "application/json",\n        "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n        this._url = url;\n    }\n\n    login(email, password) {\n        const endpoint = "/_open/auth";\n        const self = this;\n        return new Promise(function (resolve, reject) {\n            self.req(endpoint, {\n                body: { email, password },\n                method: "POST",\n            })\n                .then(({ jwt, ...data }) => {\n                    self._headers.authorization = `bearer ${jwt}`;\n                    resolve(data);\n                })\n                .catch(reject);\n        });\n    }\n\n    _handleResponse(response, resolve, reject) {\n        if (response.ok) {\n            resolve(response.json());\n        } else {\n            reject(response);\n        }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n        const self = this;\n        return new Promise(function (resolve, reject) {\n            fetch(self._url + endpoint, {\n                headers: self._headers,\n                body: body ? JSON.stringify(body) : undefined,\n                ...options,\n            }).then((response) => self._handleResponse(response, resolve, reject));\n        });\n    }\n}\n\nconst EMAIL = "nemo@nautilus.com";\nconst PASSWORD = "xxxxxx";\nconst FEDERATION_URL = "https://api-gdn.paas.macrometa.io";\nconst FABRIC_NAME = "_system";\nconst COLLECTION_NAME = "superhero";\n\n//Variables\nconst inputDocs = [\n    { _key: "james.kirk@mafabriccrometa.io", firstname: "James", lastname: "Kirk", email: "james.kirk@mafabriccrometa.io", zipcode: "12312" },\n    { _key: "han.solo@macrfabricometa.io", firstname: "Han", lastname: "Solo", email: "han.solo@macrfabricometa.io", zipcode: "12311" },\n    { _key: "bruce.wayne@mfabricacrometa.io", firstname: "Bruce", lastname: "Wayne", email: "bruce.wayne@mfabricacrometa.io", zipcode: "12345" }\n];\n\nconst updateKeys = ["james.kirk@mafabriccrometa.io", "bruce.wayne@mfabricacrometa.io"];\nconst updateKeyValue = {\n    "bruce.wayne@mfabricacrometa.io": { key: "bruce.wayne@mfabricacrometa.io", zipcode: "22222" },\n    "james.kirk@mafabriccrometa.io": { key: "james.kirk@mafabriccrometa.io", zipcode: "55555" },\n};\n\n//Queries\nconst insertData = `FOR doc in @InputDocs \\\nINSERT {"firstname":doc.firstname, "lastname":doc.lastname, "email":doc.email, "zipcode":doc.zipcode, "_key": doc._key} IN ${COLLECTION_NAME}`;\n\nconst getData = `FOR doc IN ${COLLECTION_NAME} RETURN doc`;\n\nconst updateData = `FOR i IN ${COLLECTION_NAME} \\\nFILTER i._key IN @updateKeys \\\nUPDATE i with { zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode } IN ${COLLECTION_NAME}`;\n\nconst run = async function () {\n    try {\n        const connection = new APIRequest(FEDERATION_URL);\n\n        /* -------------------- Login (nemo@nautilus.com/xxxxxxx) -------------------- */\n        await connection.login(EMAIL, PASSWORD);\n        console.log("Login Successfully using", EMAIL);\n\n        /* -------------------------- Create Doc Collection ------------------------- */\n        const collection = await connection.req(`/_fabric/${FABRIC_NAME}/_api/collection`, {\n            body: { name: COLLECTION_NAME },\n            method: "POST",\n        });\n\n        console.log("COLLECTION CREATED SUCCESSFULLY", collection);\n\n        /* ------------------------ Saving a Restql Query ----------------------- */\n        const saveRestQlQuery = (queryName, query, parameter) =>\n            connection.req(`/_fabric/${FABRIC_NAME}/_api/restql`, {\n                body: {\n                    query: {\n                        name: queryName,\n                        value: query,\n                        parameter,\n                    },\n                },\n                method: "POST",\n            });\n\n        console.log("------- Save the RestQl Queries  ------");\n        await saveRestQlQuery("insertData", insertData, {});\n        await saveRestQlQuery("getData", getData, {});\n        await saveRestQlQuery("updateData", updateData, {});\n\n        console.log("Queries Saved Successfully");\n\n        /* ----------------------- Executing a Restql Query ---------------------- */\n        const executeRestql = (queryName, parameter) =>\n            connection.req(`/_fabric/${FABRIC_NAME}/_api/restql/execute/${queryName}`, {\n                body: {\n                    bindVars: parameter,\n                },\n                method: "POST",\n            });\n\n        console.log("------- Execute the RestQl Queries  ------");\n\n        await executeRestql("insertData", {\n            InputDocs: inputDocs,\n        });\n        console.log("Data Inserted \\n");\n\n        console.log("Get Data...");\n\n        const dataBeforeUpdate = await executeRestql("getData");\n        console.log(dataBeforeUpdate.result);\n        console.log("\\n");\n\n        await executeRestql("updateData", {\n            updateKeys,\n            updateKeyValue,\n        });\n\n        console.log("Data updated \\n");\n\n        const dataAfterUpdate = await executeRestql("getData");\n        console.log(dataAfterUpdate.result);\n        console.log("\\n");\n    } catch (e) {\n        console.error(e);\n    }\n};\n\nrun();\n'))),(0,r.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\n\nfed_url = "gdn.paas.macrometa.io"\nguest_mail = "nemo@nautilus.com"\nguest_password = "xxxxxx"\ngeo_fabric = "_system"\ncollection_name = "superhero"\n\ninputDocs = [\n    { "_key": "james.kirk@mafabriccrometa.io", "firstname": "James", "lastname": "Kirk", "email": "james.kirk@mafabriccrometa.io", "zipcode": "12312"},\n    { "_key": "han.solo@macrfabricometa.io", "firstname": "Han", "lastname": "Solo", "email": "han.solo@macrfabricometa.io", "zipcode": "12311"},\n    { "_key": "bruce.wayne@mfabricacrometa.io", "firstname": "Bruce", "lastname": "Wayne", "email": "bruce.wayne@mfabricacrometa.io", "zipcode": "12345" }\n]\n\nupdateKeys = ["james.kirk@mafabriccrometa.io", "bruce.wayne@mfabricacrometa.io"]\nupdateKeyValue = {\n    "bruce.wayne@mfabricacrometa.io": { "key": "bruce.wayne@mfabricacrometa.io", "zipcode": "22222" },\n    "james.kirk@mafabriccrometa.io": { "key": "james.kirk@mafabriccrometa.io", "zipcode": "55555"}\n}\n\ninsert_data_query = (\n    "FOR doc in @InputDocs INSERT {\'firstname\':doc.firstname, \'lastname\':doc.lastname, \'email\':doc.email, \'zipcode\':doc.zipcode, \'_key\': doc._key} IN %s"\n    % collection_name\n)\nget_data_query = "FOR doc IN %s RETURN doc" % collection_name\nupdate_data_query = (\n    "FOR i IN %s FILTER i._key IN @updateKeys UPDATE i with { zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode } IN %s"\n    % (collection_name, collection_name)\n)\n\ninsert_data = {\n    "query": {\n        "name": "insertRecord",\n        "value": insert_data_query,\n    }\n}\nget_data = {"query": {"name": "getRecords", "value": get_data_query}}\nupdate_data = {"query": {"name": "updateRecord", "value": update_data_query}}\n\nif __name__ == "__main__":\n\n    print("\\n ------- CONNECTION SETUP  ------")\n    print("tenant: {}, geofabric:{}".format(guest_mail, geo_fabric))\n    client = C8Client(\n        protocol="https",\n        host=fed_url,\n        port=443,\n        email=guest_mail,\n        password=guest_password,\n        geofabric=geo_fabric,\n    )\n\n    print("\\n ------- CREATE GEO-REPLICATED COLLECTION  ------")\n    if client.has_collection(collection_name):\n        print("Collection exists")\n    else:\n        employees = client.create_collection(collection_name)\n    print("Created collection: {}".format(collection_name))\n\n    print("\\n ------- CREATE RESTQLs  ------")\n    client.create_restql(insert_data)\n    client.create_restql(get_data)\n    client.create_restql(update_data)\n    print("Created RESTQLs:{}".format(client.get_restqls()))\n\n    print("\\n ------- EXECUTE RESTQLs ------")\n    print("Insert data....")\n    response = client.execute_restql(\n        "insertRecord", {"bindVars": {"InputDocs": inputDocs}}\n    )\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("Update data....")\n    response = client.execute_restql(\n        "updateRecord",\n        {"bindVars": {"updateKeys": updateKeys, "updateKeyValue": updateKeyValue}},\n    )\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("\\n ------- DONE  ------")\n'))),(0,r.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require(\'jsc8\');\n\n// Create a authenticated instance with Token / Apikey\n// const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n// const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\nconst client = new jsc8("https://gdn.paas.macrometa.io");\n\n//Variables\nconst collectionName = "superhero" + Math.floor(1000 + Math.random() * 9000).toString();\n\nconst inputDocs = [\n    { "_key": "james.kirk@mafabriccrometa.io", "firstname": "James", "lastname": "Kirk", "email": "james.kirk@mafabriccrometa.io", "zipcode": "12312"},\n    { "_key": "han.solo@macrfabricometa.io", "firstname": "Han", "lastname": "Solo", "email": "han.solo@macrfabricometa.io", "zipcode": "12311"},\n    { "_key": "bruce.wayne@mfabricacrometa.io", "firstname": "Bruce", "lastname": "Wayne", "email": "bruce.wayne@mfabricacrometa.io", "zipcode": "12345" }\n];\n\nconst updateKeys = ["james.kirk@mafabriccrometa.io", "bruce.wayne@mfabricacrometa.io"];\nconst updateKeyValue = {\n    "bruce.wayne@mfabricacrometa.io": { key: "bruce.wayne@mfabricacrometa.io", zipcode: "22222" },\n    "james.kirk@mafabriccrometa.io": { key: "james.kirk@mafabriccrometa.io", zipcode: "55555"}\n};\n\n//Queries\nconst insertData = `FOR doc in @InputDocs \\\nINSERT {"firstname":doc.firstname, "lastname":doc.lastname, "email":doc.email, "zipcode":doc.zipcode, "_key": doc._key} IN ${collectionName}`;\n\nconst getData = `FOR doc IN ${collectionName} RETURN doc`;\n\nconst updateData = `FOR i IN ${collectionName} \\\nFILTER i._key IN @updateKeys \\\nUPDATE i with { zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode } IN ${collectionName}`;\n\nasync function restqldemo() {\n    /* Authenticate client instance with username and password */\n    console.log("------- AUTHENTICATE CLIENT INSTANCE WITH USERNAME AND PASSWORD  ------");\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    /* Create Collection */\n    console.log("------- CREATE GEO-REPLICATED COLLECTION  ------");\n\n    const collection = await client.createCollection(collectionName);\n\n    console.log("Collection " + collectionName + " created.\\n", collection);\n\n    /* Save RestQl Queries */\n    console.log("------- SAVING THE QUERIES  ------");\n\n    await client.createRestql("insertData", insertData, {});\n    await client.createRestql("getData", getData, {});\n    await client.createRestql("updateData", updateData, {});\n\n    console.log("Saved Queries Successfully\\n");\n\n    /* Execute RestQl Queries */\n    console.log("------- EXECUTING THE QUERIES  ------");\n\n    await client.executeRestql("insertData", {\n        InputDocs: inputDocs\n    });\n\n    console.log("Data Inserted \\n");\n\n    const res = await client.executeRestql("getData");\n\n    console.log("Output of get data query:");\n    console.log(res.result);\n    console.log("\\n");\n\n    await client.executeRestql("updateData", {\n        updateKeys,\n        updateKeyValue\n    });\n\n    console.log("Data updated \\n");\n\n    const data = await client.executeRestql("getData");\n\n    console.log("Output of get data query after update:");\n    console.log(data.result);\n    console.log("\\n");\n}\n\nrestqldemo().then(console.log("Starting Execution"));\n')))))}f.isMDXComponent=!0}}]);