"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5761],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=l,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294),l=t(34334),o="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,r),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(83117),l=t(67294),o=t(34334),r=t(72389),i=t(67392),c=t(7094),s=t(12466),p="tabList__CuJ",u="tabItem_LNqP";function m(e){var n,t,r=e.lazy,m=e.block,d=e.defaultValue,g=e.values,h=e.groupId,_=e.className,f=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,i.l)(y,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(n=null!=d?d:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:f[0].props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,c.U)(),C=v.tabGroupChoices,x=v.setTabGroupChoices,w=(0,l.useState)(k),T=w[0],N=w[1],R=[],D=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var A=C[h];null!=A&&A!==T&&y.some((function(e){return e.value===A}))&&N(A)}var E=function(e){var n=e.currentTarget,t=R.indexOf(n),a=y[t].value;a!==T&&(D(n),N(a),null!=h&&x(h,String(a)))},j=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,l=R.indexOf(e.currentTarget)+1;t=null!=(a=R[l])?a:R[0];break;case"ArrowLeft":var o,r=R.indexOf(e.currentTarget)-1;t=null!=(o=R[r])?o:R[R.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},_)},y.map((function(e){var n=e.value,t=e.label,r=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return R.push(e)},onKeyDown:j,onFocus:E,onClick:E},r,{className:(0,o.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),r?(0,l.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function d(e){var n=(0,r.Z)();return l.createElement(m,(0,a.Z)({key:String(n)},e))}},63673:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var a=t(83117),l=t(80102),o=(t(67294),t(3905)),r=t(65488),i=t(85162),c=["components"],s={title:"Graph Edge Quickstart",sidebar_position:1},p=void 0,u={unversionedId:"collections/graphs/quickstart",id:"collections/graphs/quickstart",title:"Graph Edge Quickstart",description:"This article is an introduction to working with documents in GDN with pyC8 and jsC8 SDKs.",source:"@site/docs/collections/graphs/quickstart.md",sourceDirName:"collections/graphs",slug:"/collections/graphs/quickstart",permalink:"/docs/collections/graphs/quickstart",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/graphs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Graph Edge Quickstart",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Graph Edge",permalink:"/docs/collections/graphs/"},next:{title:"Create Graph Edge",permalink:"/docs/collections/graphs/create-graph-edge"}},m={},d=[{value:"Example",id:"example",level:2},{value:"SDK Download",id:"sdk-download",level:3},{value:"Connect to GDN",id:"connect-to-gdn",level:3},{value:"Get GeoFabric Details",id:"get-geofabric-details",level:3},{value:"Create Collection",id:"create-collection",level:3},{value:"Create Edge Collection",id:"create-edge-collection",level:3},{value:"Insert Documents",id:"insert-documents",level:3},{value:"Create Graph",id:"create-graph",level:3},{value:"Graph Traversals",id:"graph-traversals",level:3},{value:"Outbound Traversal",id:"outbound-traversal",level:5},{value:"Inbound Traversal",id:"inbound-traversal",level:5},{value:"Delete Graph",id:"delete-graph",level:3}],g={toc:d};function h(e){var n=e.components,t=(0,l.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This article is an introduction to working with documents in GDN with ",(0,o.kt)("a",{parentName:"p",href:"https://pyc8.readthedocs.io/en/latest/"},"pyC8")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jsc8"},"jsC8")," SDKs."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Graphs")," enable you to group your data and perform more powerful queries across connected documents. A graph consists of ",(0,o.kt)("em",{parentName:"p"},"vertices")," and ",(0,o.kt)("em",{parentName:"p"},"edges"),". Vertices are stored in collections and linked by an edge document. Edges are stored as documents in edge collections, and vertices can be a document or an edge."),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"edge definition")," determines which collections are used in a named graph. A named graph must contain at least one edge definition."),(0,o.kt)("p",null," You can turn documents into graph structures for semantic queries with nodes, edges, and properties. Graphs directly connect data items between different collections. You can use graphs to refer to documents in different tables without a nested join. Graphs can also find patterns of document connections, such as the shortest path between two vertices in a graph."),(0,o.kt)("p",null,"Edges in one edge collection may point to several vertex collections. You can add attributes to edges to do things like labelling connections."),(0,o.kt)("p",null,"Edges have a direction, with their relations ",(0,o.kt)("inlineCode",{parentName:"p"},"_from")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_to")," pointing from one document to another document stored in vertex collections. In queries you can define in which directions the edge relations may be followed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OUTBOUND: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2192 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to")),(0,o.kt)("li",{parentName:"ul"},"INBOUND: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2190 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to")),(0,o.kt)("li",{parentName:"ul"},"ANY: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2194 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to"),".")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"For this example, assume the following credentials:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tenant name is ",(0,o.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com"),"."),(0,o.kt)("li",{parentName:"ul"},"User password is ",(0,o.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,o.kt)("h3",{id:"sdk-download"},"SDK Download"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n    To install pyC8, simply run\n\n        $ pip3 install pyC8\n\n    or, if you prefer to use conda:\n\n        conda install -c conda-forge pyC8\n\n    or pipenv:\n\n        pipenv install --pre pyC8\n\n    Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    With Yarn or NPM\n\n        yarn add jsc8\n        (or)\n        npm install jsc8\n\n    If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n        npm install --global jsc8\n\n    From source,\n\n        git clone https://github.com/macrometacorp/jsc8.git\n        cd jsC8\n        npm install\n        npm run dist\n")))),(0,o.kt)("h3",{id:"connect-to-gdn"},"Connect to GDN"),(0,o.kt)("p",null,"The first step in using GDN is to establish a connection to a local region. When this code executes, it initializes the server connection to the region URL you sepcified."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    print(\"--- Connecting to C8\")\n    # Simple Way\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n\n    # To use advanced options\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443)\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Simple Way\n    const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // ----- OR -----\n    const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n\n\n    // To use advanced options\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n')))),(0,o.kt)("h3",{id:"get-geofabric-details"},"Get GeoFabric Details"),(0,o.kt)("p",null,"To get details of fabric,"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    from c8 import C8Client\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n    print(\"Get geo fabric details...\")\n    print(client.get_fabric_details())\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email & Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function getFabric() {\n        try{\n          await console.log("Getting the fabric details...");\n          let result = await client.get();\n\n          await console.log("result is: ", result);\n        } catch(e){\n          await console.log("Fabric details could not be fetched because "+ e);\n        }\n    }\n\n    getFabric();\n')))),(0,o.kt)("h3",{id:"create-collection"},"Create Collection"),(0,o.kt)("p",null,"We can now create collection in the fabric. To do this, first you connect to fabric and then create a collection called ",(0,o.kt)("inlineCode",{parentName:"p"},"employees"),"."),(0,o.kt)("p",null,"The below example shows the steps."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n    client.create_collection(name='employees')\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email and Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    //Variables\n    const collection_name = "employees";\n\n    async function createColl() {\n        try{\n          console.log(`Creating the collection ${collection_name}...`);\n          const exists_coll = await client.hasCollection(collection_name);\n          if (exists_coll === false) {\n            await client.createCollection(collection_name);\n          }\n        } catch(e){\n          await console.log("Collection could not be created because "+ e);\n        }\n    }\n\n    createColl();\n')))),(0,o.kt)("h3",{id:"create-edge-collection"},"Create Edge Collection"),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"edge collection")," contains edge documents and shares its namespace with all other types of collections. You can manage edge documents via standard collection API wrappers, but using edge collection API wrappers provides additional safeguards:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All modifications are executed in transactions."),(0,o.kt)("li",{parentName:"ul"},"Edge documents are checked against the edge definitions on insert.")),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    # Simple Approach\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n    client.create_collection(name='employees')\n    if client.has_graph('school'):\n      print(\"Graph exists\")\n    else:\n      print(\"Create: \", client.create_graph(graph_name='school'))\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email & Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function createEdgeColl() {\n        try{\n          console.log(`Creating the edge collection`);\n          const exists_coll = await client.hasCollection("edgeCollection");\n          if (exists_coll === false) {\n            await client.createCollection("edgeCollection", { waitForSync: true }, true);\n          }\n        } catch(e){\n          await console.log("Edge Collection could not be created because "+ e);\n        }\n    }\n\n    createEdgeColl();\n')))),(0,o.kt)("p",null,"You can manage edges via graph API wrappers also, but you must use document IDs instead of keys where applicable."),(0,o.kt)("h3",{id:"insert-documents"},"Insert Documents"),(0,o.kt)("p",null,"Let's insert documents to the employees collection as shown below."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n    client.insert_document(collection_name='employees', document={'_key':'Jean', 'firstname': 'Jean', 'lastname':'Picard', 'email':'jean.picard@macrometa.io'})\n\n    docs = [\n      {'_kefabricy':'James', 'firstname': 'James', 'lastname':'Kirk', 'email':'james.kirk@mafabriccrometa.io'},\n      {'_kefabricy': 'Han', 'firstname': 'Han', 'lastname':'Solo', 'email':'han.solo@macrfabricometa.io'},\n      {'_kefabricy': 'Bruce', 'firstname': 'Bruce', 'lastname':'Wayne', 'email':'bruce.wayne@mfabricacrometa.io'}\n    ]\n\n    client.insert_document(collection_name='employees', document=docs)\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email and Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function insertDoc() {\n        try{\n          await client.insertDocumentMany(\n            "employees",\n            [{ firstname: \'Jean\', lastname: \'Picard\' },{ firstname: \'Bruce\', lastname: \'Wayne\' }]\n          );\n        } catch(e){\n          await console.log("Document could not be inserted because "+ e);\n        }\n    }\n\n    insertDoc();\n')))),(0,o.kt)("h3",{id:"create-graph"},"Create Graph"),(0,o.kt)("p",null,"A graph consists of vertices and edges. Vertices are stored as documents in vertex collections and edges stored as documents in edge collections. The collections used in a graph and their relations are specified with edge definitions."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    from c8 import C8Client\n\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n\n\n    # List existing graphs in the fabric.\n    client.get_graphs()\n\n    # Create a new graph named \"school\" if it does not already exist.\n    # This returns an API wrapper for \"school\" graph.\n    iif client.has_graph('school'):\n        school = client.graph('school')\n    else:\n        school = client.create_graph('school')\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email and Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function createGraph(){\n        const info = await client.createGraph(\'some-graph\', {\n          edgeDefinitions: [{\n              collection: \'edges\',\n              from: [\'start-vertices\'],\n              to: [\'end-vertices\']\n          }]\n        });\n    }\n\n    createGraph();\n')))),(0,o.kt)("h3",{id:"graph-traversals"},"Graph Traversals"),(0,o.kt)("p",null,"A graph consists of ",(0,o.kt)("inlineCode",{parentName:"p"},"vertices")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"edges"),". Vertices are stored as documents in vertex collections and edges stored as documents in edge collections. The collections used in a graph and their relations are specified with edge definitions."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'    from c8 import C8Client\n    import pprint\n\n    # Variables - Queries\n    global_url = "gdn.paas.macrometa.io"\n    email = "nemo@nautilus.com"\n    password = "xxxxxx"\n    geo_fabric = "_system"\n    collection_people = "CDRpeople"\n    collection_calls = "CDRcalls"\n    collection_cellsites = "CDRcellsites"\n    collection_graph = "CDRgraphdocs"\n    read_people = "FOR person IN CDRpeople RETURN person"\n    read_calls = "FOR call IN CDRcalls RETURN call"\n    person = "Lou Feaveer"\n    graph_traversal1 = "FOR c IN CDRpeople FILTER c.full_name == \\"{}\\" FOR v IN 1..1 INBOUND c CDRcalls RETURN v".format(person)\n    graph_traversal2 = "FOR c IN CDRpeople FILTER c.full_name == \\"{}\\" FOR v IN 1..1 OUTBOUND c CDRcalls RETURN v".format(person)\n\n    pp = pprint.PrettyPrinter(indent=4)\n\n    # Initialize the C8 Data Fabric client.\n    # Step1: Open connection to GDN. You will be routed to closest region.\n    print("1. CONNECT: federation: {},  user: {}".format(global_url, email))\n    client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n                            email=email, password=password,\n                            geofabric=geo_fabric)\n\n\n    # Step2: Create collections if not exists\n    print("2a. CREATE_PEOPLE_VERTEX_COLLECTION: region: {},  collection: {}".format(global_url, collection_people))\n    if client.has_collection(collection_people):\n        peopleCol = client.collection(collection_people)\n    else:\n        peopleCol = client.create_collection(collection_people)\n\n    print("2b. CREATE_CALLS_EDGE_COLLECTION: region: {},  collection: {}".format(global_url, collection_calls))\n    if client.has_collection(collection_calls):\n        callsCol = client.collection(collection_calls)\n    else:\n        callsCol = client.create_collection(collection_calls, edge=True)\n\n    # Step3: Insert data into collections.\n    print("3a. INSERT_PEOPLE_DATA: region: {}, collection: {}".format(global_url, collection_people))\n\n    # insert documents into the collection\n    docs = [\n      {\n        "full_name": "Kiel Dummer",\n        "first_name": "Kiel",\n        "last_name": "Dummer",\n        "city": "Burbank",\n        "state": "CA",\n        "address": "40317 5th Crossing",\n        "calling_nbr": "757-697-9065",\n        "_key": "757-697-9065"\n      },\n      {\n        "full_name": "Pernell Winspare",\n        "first_name": "Pernell",\n        "last_name": "Winspare",\n        "city": "San Diego",\n        "state": "CA",\n        "address": "596 Packers Pass",\n        "calling_nbr": "718-208-8096",\n        "_key": "718-208-8096"\n      },\n      {\n        "full_name": "Ava Kermath",\n        "first_name": "Ava",\n        "last_name": "Kermath",\n        "city": "Berkeley",\n        "state": "CA",\n        "address": "2 Doe Crossing Junction",\n        "calling_nbr": "765-623-5328",\n        "_key": "765-623-5328"\n      },\n      {\n        "full_name": "Tremain McGrah",\n        "first_name": "Tremain",\n        "last_name": "McGrah",\n        "city": "Torrance",\n        "state": "CA",\n        "address": "079 Russell Street",\n        "calling_nbr": "859-783-3227",\n        "_key": "859-783-3227"\n      },\n      {\n        "full_name": "Vidovik Boddam",\n        "first_name": "Vidovik",\n        "last_name": "Boddam",\n        "city": "Los Angeles",\n        "state": "CA",\n        "address": "3 Brentwood Crossing",\n        "calling_nbr": "703-265-1313",\n        "_key": "703-265-1313"\n      },\n      {\n        "full_name": "Oralie Goward",\n        "first_name": "Oralie",\n        "last_name": "Goward",\n        "city": "Los Angeles",\n        "state": "CA",\n        "address": "922 Columbus Park",\n        "calling_nbr": "617-815-8610",\n        "_key": "617-815-8610"\n      },\n      {\n        "full_name": "Lou Feaveer",\n        "first_name": "Lou",\n        "last_name": "Feaveer",\n        "city": "San Jose",\n        "state": "CA",\n        "address": "55223 Hooker Crossing",\n        "calling_nbr": "716-463-8993",\n        "_key": "716-463-8993"\n      },\n      {\n        "full_name": "Peria King",\n        "first_name": "Peria",\n        "last_name": "King",\n        "city": "Stockton",\n        "state": "CA",\n        "address": "8 Troy Plaza",\n        "calling_nbr": "713-707-8699",\n        "_key": "713-707-8699"\n      }\n    ]\n    peopleCol.insert_many(docs)\n\n    print("3a. INSERT_CALL_RECORDS_DATA: region: {}, collection: {}".format(global_url, collection_calls))\n    docs = [\n            {\n        "calling_nbr": "757-697-9065",\n        "called_nbr": "716-463-8993",\n        "_from": "CDRpeople/757-697-9065",\n        "_to": "CDRpeople/716-463-8993",\n        "call_date": "1/4/2020",\n        "call_time": "13:33",\n        "call_duration": 30,\n        "cell_site": 4044703906\n      },\n      {\n        "calling_nbr": "716-463-8993",\n        "called_nbr": "713-707-8699",\n        "_from": "CDRpeople/716-463-8993",\n        "_to": "CDRpeople/713-707-8699",\n        "call_date": "1/28/2020",\n        "call_time": "3:02",\n        "call_duration": 18,\n        "cell_site": 2289973823\n      },\n      {\n        "calling_nbr": "765-623-5328",\n        "called_nbr": "713-707-8699",\n        "_from": "CDRpeople/765-623-5328",\n        "_to": "CDRpeople/713-707-8699",\n        "call_date": "1/28/2020",\n        "call_time": "3:02",\n        "call_duration": 18,\n        "cell_site": 2289973823\n      }\n        ]\n    callsCol.insert_many(docs)\n\n    #Step4: Create a graph\n    print("4. CREATE_GRAPH...CDRgraph")\n    graph = client.create_graph(collection_graph)\n    register = graph.create_edge_definition(\n            edge_collection=collection_calls,\n            from_vertex_collections=[collection_people],\n            to_vertex_collections=[collection_people]\n        )\n\n    # Step5: Read Data\n    print("5a. GRAPH_TRAVERSAL: Find outbound calls TO: {}".format(person))\n    cursor = client.execute_query(graph_traversal1)\n    docs = [document for document in cursor]\n    pp.pprint(docs)\n    print("5b. GRAPH_TRAVERSAL: Find inbound calls FROM: {}".format(person))\n    cursor = client.execute_query(graph_traversal2)\n    docs = [document for document in cursor]\n    pp.pprint(docs)\n\n    # Step6: Delete Data\n    print("6. DELETE_DATA...")\n    #callsCol.truncate()\n    #peopleCol.truncate()\n    client.delete_graph(collection_graph, drop_collections=False)\n'))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require(\'jsc8\');\n\n    // Variables - DB\n    const global_url = "https://gdn.paas.macrometa.io";\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email and Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    //Variables\n    const collection_people = "CDRpeople";\n    const collection_calls = "CDRcalls";\n    const collection_cellsites = "CDRcellsites";\n    const collection_graph = "CDRgraphdocs";\n    const person = "Lou Feaveer";\n\n    let datalist = [];\n\n    // Variables - Queries\n    const read_people = "FOR person IN CDRpeople RETURN person";\n    const read_calls = "FOR call IN CDRcalls RETURN call";\n    const graph_traversal1 = `FOR c IN CDRpeople FILTER c.full_name == \\"${person}\\" FOR v IN 1..1 INBOUND c CDRcalls RETURN v`;\n    const graph_traversal2 = `FOR c IN CDRpeople FILTER c.full_name == \\"${person}\\" FOR v IN 1..1 OUTBOUND c CDRcalls RETURN v`;\n    \n    async function createCollection() {\n    \n      console.log("\\n 2. CREATE_COLLECTION");\n\n      try{\n        console.log(`Creating the collection ${collection_people}...`);\n          const exists_coll = await client.hasCollection(collection_people);\n          if (exists_coll === false) {\n            await client.createCollection(collection_people);\n          }\n\n          console.log(`Creating the collection ${collection_calls}...`);\n          const exists_coll = await client.hasCollection(collection_calls);\n          if (exists_coll === false) {\n            await client.createCollection(collection_calls);\n          }\n      }\n      catch (e) {\n        await console.log("Collection creation did not succeed due to " + e);\n      }\n    }\n        \n    async function insertData() {\n\n      console.log(`\\n 3a. INSERT_PEOPLE_DATA in region ${global_url}`);\n      let people_data =[\n        {\n          "full_name": "Kiel Dummer",\n          "first_name": "Kiel",\n          "last_name": "Dummer",\n          "city": "Burbank",\n          "state": "CA",\n          "address": "40317 5th Crossing",\n          "calling_nbr": "757-697-9065",\n          "_key": "757-697-9065"\n        },\n        {\n          "full_name": "Pernell Winspare",\n          "first_name": "Pernell",\n          "last_name": "Winspare",\n          "city": "San Diego",\n          "state": "CA",\n          "address": "596 Packers Pass",\n          "calling_nbr": "718-208-8096",\n          "_key": "718-208-8096"\n        },\n        {\n          "full_name": "Ava Kermath",\n          "first_name": "Ava",\n          "last_name": "Kermath",\n          "city": "Berkeley",\n          "state": "CA",\n          "address": "2 Doe Crossing Junction",\n          "calling_nbr": "765-623-5328",\n          "_key": "765-623-5328"\n        },\n        {\n          "full_name": "Tremain McGrah",\n          "first_name": "Tremain",\n          "last_name": "McGrah",\n          "city": "Torrance",\n          "state": "CA",\n          "address": "079 Russell Street",\n          "calling_nbr": "859-783-3227",\n          "_key": "859-783-3227"\n        },\n        {\n          "full_name": "Vidovik Boddam",\n          "first_name": "Vidovik",\n          "last_name": "Boddam",\n          "city": "Los Angeles",\n          "state": "CA",\n          "address": "3 Brentwood Crossing",\n          "calling_nbr": "703-265-1313",\n          "_key": "703-265-1313"\n        },\n        {\n          "full_name": "Oralie Goward",\n          "first_name": "Oralie",\n          "last_name": "Goward",\n          "city": "Los Angeles",\n          "state": "CA",\n          "address": "922 Columbus Park",\n          "calling_nbr": "617-815-8610",\n          "_key": "617-815-8610"\n        },\n        {\n          "full_name": "Lou Feaveer",\n          "first_name": "Lou",\n          "last_name": "Feaveer",\n          "city": "San Jose",\n          "state": "CA",\n          "address": "55223 Hooker Crossing",\n          "calling_nbr": "716-463-8993",\n          "_key": "716-463-8993"\n        },\n        {\n          "full_name": "Peria King",\n          "first_name": "Peria",\n          "last_name": "King",\n          "city": "Stockton",\n          "state": "CA",\n          "address": "8 Troy Plaza",\n          "calling_nbr": "713-707-8699",\n          "_key": "713-707-8699"\n        }\n      ]\n      await client.insertDocumentMany(collection_people, people_data);\n\n      console.log(`\\n 3a. INSERT_CALL_RECORDS_DATA in region ${global_url}`);\n      let callsdata = [\n        {\n        "calling_nbr": "757-697-9065",\n        "called_nbr": "716-463-8993",\n        "_from": "CDRpeople/757-697-9065",\n        "_to": "CDRpeople/716-463-8993",\n        "call_date": "1/4/2020",\n        "call_time": "13:33",\n        "call_duration": 30,\n        "cell_site": 4044703906\n        },\n        {\n          "calling_nbr": "716-463-8993",\n          "called_nbr": "713-707-8699",\n          "_from": "CDRpeople/716-463-8993",\n          "_to": "CDRpeople/713-707-8699",\n          "call_date": "1/28/2020",\n          "call_time": "3:02",\n          "call_duration": 18,\n          "cell_site": 2289973823\n        },\n        {\n          "calling_nbr": "765-623-5328",\n          "called_nbr": "713-707-8699",\n          "_from": "CDRpeople/765-623-5328",\n          "_to": "CDRpeople/713-707-8699",\n          "call_date": "1/28/2020",\n          "call_time": "3:02",\n          "call_duration": 18,\n          "cell_site": 2289973823\n        }\n      ];\n      await client.insertDocumentMany(collection_calls, callsdata);\n    }\n\n    async function createGraph(){\n      console.log(`\\n 4. CREATE_GRAPH region ${global_url}`);\n\n      await client.createGraph(collection_graph, {\n        edgeDefinitions: [{\n          collection: collection_calls,\n          from: [collection_people],\n          to: [collection_people]\n        }]\n      });\n    }\n\n\n    async function readData(){\n      console.log(`5a. GRAPH_TRAVERSAL: Find outbound calls TO: ${person}`);\n      let result = await client.executeQuery(graph_traversal1);\n      console.log(result);\n      \n      console.log(`5b. GRAPH_TRAVERSAL: Find inbound calls FROM: ${person}`);\n      result = await client.executeQuery(graph_traversal2);\n      console.log(result);\n    }\n\n\n\n    async function deleteData(){\n      console.log("\\ 6. DELETE_DATA");e fabric details...");\n      await client.deleteGraph(collection_graph, true);e fabric details...");\n      await client.deleteCollection(collection_people);e fabric details...");\n      await client.deleteCollection(collection_calls);e fabric details...");\n    }\n\n\n    (async function(){\n      await createCollection();\n      await insertData();\n      await createGraph();\n      await readData();\n      await deleteData();\n    })();\n')))),(0,o.kt)("h5",{id:"outbound-traversal"},"Outbound Traversal"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'    # Step4: Read Data\n    print("4a. GRAPH_TRAVERSAL: Find outbound calls TO: {}".format(person))\n    cursor = client.execute_query(graph_traversal1)\n    docs = [document for document in cursor]\n    pp.pprint(docs)\n'))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    console.log(`5a. GRAPH_TRAVERSAL: Find outbound calls TO: ${person}`);\n    let result = await client.executeQuery(graph_traversal1);\n    console.log(result);\n")))),(0,o.kt)("h5",{id:"inbound-traversal"},"Inbound Traversal"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'    print("4b. GRAPH_TRAVERSAL: Find inbound calls FROM: {}".format(person))\n    cursor = client.execute_query(graph_traversal2)\n    docs = [document for document in cursor]\n    pp.pprint(docs)\n'))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    console.log(`5b. GRAPH_TRAVERSAL: Find inbound calls FROM: ${person}`);\n    result = await client.executeQuery(graph_traversal2);\n    console.log(result);\n")))),(0,o.kt)("h3",{id:"delete-graph"},"Delete Graph"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    from c8 import C8Client\n\n    # Initialize the C8 Data Fabric client.\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password=\"xxxxxx\",\n                            geofabric='_system')\n\n    # This returns an API wrapper for \"school\" graph and deletes the graph\n    client.delete_graph('school')\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Crete a authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email & Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function DeleteGraph(){\n      await client.deleteGraph(some-graph, true);\n    }\n\n    DeleteGraph();\n')))))}h.isMDXComponent=!0}}]);